{"remainingRequest":"/Users/cnmingenuity/Desktop/bee-app/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/cnmingenuity/Desktop/bee-app/src/views/JobBoard.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/cnmingenuity/Desktop/bee-app/src/views/JobBoard.vue","mtime":1616211260850},{"path":"/Users/cnmingenuity/Desktop/bee-app/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/cnmingenuity/Desktop/bee-app/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/cnmingenuity/Desktop/bee-app/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/cnmingenuity/Desktop/bee-app/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCB7IGNvbW1lbnRzQ29sbGVjdGlvbiB9IGZyb20gJ0AvZmlyZWJhc2UnCmltcG9ydCB7IG1hcFN0YXRlIH0gZnJvbSAndnVleCcKaW1wb3J0IG1vbWVudCBmcm9tICdtb21lbnQnCmltcG9ydCBDb21tZW50TW9kYWwgZnJvbSAnQC9jb21wb25lbnRzL0NvbW1lbnRNb2RhbCcKCmV4cG9ydCBkZWZhdWx0IHsKICBjb21wb25lbnRzOiB7CiAgICBDb21tZW50TW9kYWwKICB9LAogIGRhdGEoKSB7CiAgICByZXR1cm4gewogICAgICAvL3VwZGF0ZSBkYXRhIG9iamVjdCB0byBhbGxvdyB1c2VycyB0byBwb3N0IGNvbnRlbnQKICAgICAgcG9zdDogewogICAgICAgIGNvbnRlbnQ6ICcnCiAgICAgIH0sCiAgICAgIHNob3dDb21tZW50TW9kYWw6IGZhbHNlLAogICAgICBzZWxlY3RlZFBvc3Q6IHt9LAogICAgICBzaG93UG9zdE1vZGFsOiBmYWxzZSwKICAgICAgZnVsbFBvc3Q6IHt9LAogICAgICBwb3N0Q29tbWVudHM6IFtdCiAgICB9CiAgfSwKICAvL1VzZSBtYXBTdGF0ZSB0byBwdWxsIHVzZXJQcm9maWxlIGFuZCBwb3N0cyBvYmplY3RzIGludG8gZGFzaGJvYXJkIGNvbXBvbmVudAogIGNvbXB1dGVkOiB7CiAgICAuLi5tYXBTdGF0ZShbJ3VzZXJQcm9maWxlJywgJ3Bvc3RzJ10pCiAgfSwKICBtZXRob2RzOiB7CiAgLy9NYWtlIHRoZSBtZXRob2QgZm9yIHVzZXJzIHRvIHBvc3QgaW4gdGhlIGJvYXJkCiAgICBjcmVhdGVQb3N0KCkgewogICAgICB0aGlzLiRzdG9yZS5kaXNwYXRjaCgnY3JlYXRlUG9zdCcsIHsgY29udGVudDogdGhpcy5wb3N0LmNvbnRlbnQgfSkKICAgICAgdGhpcy5wb3N0LmNvbnRlbnQgPSAnJwogICAgfSwKICAgIC8vTWFrZSBtZXRob2QgdG8gc2hvdy9oaWRlIG1vZGFsCiAgICB0b2dnbGVDb21tZW50TW9kYWwocG9zdCkgewogICAgICB0aGlzLnNob3dDb21tZW50TW9kYWwgPSAhdGhpcy5zaG93Q29tbWVudE1vZGFsCgogICAgICAvLyBpZiBvcGVuaW5nIG1vZGFsIHNldCBzZWxlY3RlZFBvc3QsIGVsc2UgY2xlYXIKICAgICAgaWYgKHRoaXMuc2hvd0NvbW1lbnRNb2RhbCkgewogICAgICAgIHRoaXMuc2VsZWN0ZWRQb3N0ID0gcG9zdAogICAgICB9IGVsc2UgewogICAgICAgIHRoaXMuc2VsZWN0ZWRQb3N0ID0ge30KICAgICAgfQogICAgfSwKICAgIC8vY291bnQgaG93IG1hbnkgbGlrZXMgYSBwb3N0IHJlY2lldmVzCiAgICBsaWtlUG9zdChpZCwgbGlrZXNDb3VudCkgewogICAgICB0aGlzLiRzdG9yZS5kaXNwYXRjaCgnbGlrZVBvc3QnLCB7IGlkLCBsaWtlc0NvdW50IH0pCiAgICB9LAogICAgLy9jcmVhdGUgdmlld1Bvc3QgYW5kIGNsb3NlUG9zdCB0b2dnbGUgbWV0aG9kcwogICAgYXN5bmMgdmlld1Bvc3QocG9zdCkgewogICAgICBjb25zdCBkb2NzID0gYXdhaXQgY29tbWVudHNDb2xsZWN0aW9uLndoZXJlKCdwb3N0SWQnLCAnPT0nLCBwb3N0LmlkKS5nZXQoKQoKICAgICAgZG9jcy5mb3JFYWNoKGRvYyA9PiB7CiAgICAgICAgbGV0IGNvbW1lbnQgPSBkb2MuZGF0YSgpCiAgICAgICAgY29tbWVudC5pZCA9IGRvYy5pZAogICAgICAgIHRoaXMucG9zdENvbW1lbnRzLnB1c2goY29tbWVudCkKICAgICAgfSkKCiAgICAgIHRoaXMuZnVsbFBvc3QgPSBwb3N0CiAgICAgIHRoaXMuc2hvd1Bvc3RNb2RhbCA9IHRydWUKICAgIH0sCiAgICBjbG9zZVBvc3RNb2RhbCgpIHsKICAgICAgdGhpcy5wb3N0Q29tbWVudHMgPSBbXQogICAgICB0aGlzLnNob3dQb3N0TW9kYWwgPSBmYWxzZQogICAgfQogIH0sCiAgLy9BcHBseSBmaWx0ZXJzIHRvIGZvcm1hdCB0aGUgZGF0ZSBhbmQgdHJpbSB0aGUgcG9zdGluZyBsZW5ndGgKICBmaWx0ZXJzOiB7CiAgICBmb3JtYXREYXRlKHZhbCkgewogICAgICBpZiAoIXZhbCkgeyByZXR1cm4gJy0nIH0KCiAgICAgIGxldCBkYXRlID0gdmFsLnRvRGF0ZSgpCiAgICAgIHJldHVybiBtb21lbnQoZGF0ZSkuZnJvbU5vdygpCiAgICB9LAogICAgdHJpbUxlbmd0aCh2YWwpIHsKICAgICAgaWYgKHZhbC5sZW5ndGggPCAyMDApIHsgcmV0dXJuIHZhbCB9CiAgICAgIHJldHVybiBgJHt2YWwuc3Vic3RyaW5nKDAsIDIwMCl9Li4uYAogICAgfQogIH0KfQo="},{"version":3,"sources":["JobBoard.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgFA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"JobBoard.vue","sourceRoot":"src/views","sourcesContent":["<template>\n    <!-- Job Board View-->\n  <div id=\"JobBoard\">\n    <!--Use a transition fade for the show or hide animation of the comment modal -->\n    <transition name=\"fade\">\n      <CommentModal v-if=\"showCommentModal\" :post=\"selectedPost\" @close=\"toggleCommentModal()\"></CommentModal>\n    </transition>\n    <section>\n      <div class=\"col1\">\n        <div class=\"profile\">\n          <h5>{{ userProfile.name }}</h5>\n          <p>{{ userProfile.title }}</p>\n              <!-- Add the create post method on the submit button-->\n          <div class=\"create-post\">\n            <p>create a post</p>\n            <form @submit.prevent>\n              <textarea v-model.trim=\"post.content\"></textarea>\n                  <!-- Disable the button until the user has entered content-->\n              <button @click=\"createPost()\" :disabled=\"post.content === ''\" class=\"button\">post</button>\n            </form>\n          </div>\n        </div>\n      </div>\n      <div class=\"col2\">\n        <div v-if=\"posts.length\">\n          <!--Display the posts using v-for -->\n          <div v-for=\"post in posts\" :key=\"post.id\" class=\"post\">\n            <!--Display username for posts -->\n            <h5>{{ post.userName }}</h5>\n            <!--Include and format date post was created-->\n            <span>{{ post.createdOn | formatDate }}</span>\n            <!--Display content of the post and format the length -->\n            <p>{{ post.content | trimLength }}</p>\n            <ul>\n              <!--Allow for users to interact with eachother through comments, likes, and viewing the full post. Add click event to show/hide modal -->\n              <li><a @click=\"toggleCommentModal(post)\">comments {{ post.comments }}</a></li>\n              <li><a @click=\"likePost(post.id, post.likes)\">likes {{ post.likes }}</a></li>\n              <li><a @click=\"viewPost(post)\">view full post</a></li>\n            </ul>\n          </div>\n        </div>\n        <div v-else>\n          <p class=\"no-results\">There are currently no posts</p>\n        </div>\n      </div>\n    </section>\n\n    <!-- full post modal -->\n    <transition name=\"fade\">\n      <div v-if=\"showPostModal\" class=\"p-modal\">\n        <div class=\"p-container\">\n          <a @click=\"closePostModal()\" class=\"close\">close</a>\n          <div class=\"post\">\n            <!--Display post username, date created on, and full content -->\n            <h5>{{ fullPost.userName }}</h5>\n            <span>{{ fullPost.createdOn | formatDate }}</span>\n            <p>{{ fullPost.content }}</p>\n            <ul>\n              <li><a>comments {{ fullPost.comments }}</a></li>\n              <li><a>likes {{ fullPost.likes }}</a></li>\n            </ul>\n          </div>\n          <!--Display comments on the post with corresponding date and username -->\n          <div v-show=\"postComments.length\" class=\"comments\">\n            <div v-for=\"comment in postComments\" :key=\"comment.id\" class=\"comment\">\n              <p>{{ comment.userName }}</p>\n              <span>{{ comment.createdOn | formatDate }}</span>\n              <p>{{ comment.content }}</p>\n            </div>\n          </div>\n        </div>\n      </div>\n    </transition>\n  </div>\n</template>\n\n<!-- We can expand the functionality of the Job Board by allowing users to upload files including an avatar, resume, survey or job summary. Creating a dashboard for users to see how many new messages or postings are available since their previous login is another feature to continue expanding on capabilities. To further bolster security efforts, consider content moderation infrastructure and firebase security rules to ensure higher security environment and authentication for user data.-->\n\n    <!-- Give users ability to make posts -->\n<script>\nimport { commentsCollection } from '@/firebase'\nimport { mapState } from 'vuex'\nimport moment from 'moment'\nimport CommentModal from '@/components/CommentModal'\n\nexport default {\n  components: {\n    CommentModal\n  },\n  data() {\n    return {\n      //update data object to allow users to post content\n      post: {\n        content: ''\n      },\n      showCommentModal: false,\n      selectedPost: {},\n      showPostModal: false,\n      fullPost: {},\n      postComments: []\n    }\n  },\n  //Use mapState to pull userProfile and posts objects into dashboard component\n  computed: {\n    ...mapState(['userProfile', 'posts'])\n  },\n  methods: {\n  //Make the method for users to post in the board\n    createPost() {\n      this.$store.dispatch('createPost', { content: this.post.content })\n      this.post.content = ''\n    },\n    //Make method to show/hide modal\n    toggleCommentModal(post) {\n      this.showCommentModal = !this.showCommentModal\n\n      // if opening modal set selectedPost, else clear\n      if (this.showCommentModal) {\n        this.selectedPost = post\n      } else {\n        this.selectedPost = {}\n      }\n    },\n    //count how many likes a post recieves\n    likePost(id, likesCount) {\n      this.$store.dispatch('likePost', { id, likesCount })\n    },\n    //create viewPost and closePost toggle methods\n    async viewPost(post) {\n      const docs = await commentsCollection.where('postId', '==', post.id).get()\n\n      docs.forEach(doc => {\n        let comment = doc.data()\n        comment.id = doc.id\n        this.postComments.push(comment)\n      })\n\n      this.fullPost = post\n      this.showPostModal = true\n    },\n    closePostModal() {\n      this.postComments = []\n      this.showPostModal = false\n    }\n  },\n  //Apply filters to format the date and trim the posting length\n  filters: {\n    formatDate(val) {\n      if (!val) { return '-' }\n\n      let date = val.toDate()\n      return moment(date).fromNow()\n    },\n    trimLength(val) {\n      if (val.length < 200) { return val }\n      return `${val.substring(0, 200)}...`\n    }\n  }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n\n</style>\n\n"]}]}